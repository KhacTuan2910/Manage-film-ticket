/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package net.view;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.controller.DataControllerImp;
import net.model.Movie;
import net.controller.DataController;
import net.model.Bill;
import net.model.Customer;

/**
 *
 * @author NGUYEN KHAC TUAN
 */
public class HomeFrm extends javax.swing.JFrame implements ActionListener {

    private List<Movie> movies;
    private List<Bill> bills;
    private List<Customer> customers;
    private DefaultTableModel tableModelMovie;
    private DefaultTableModel tableModelCustomer;
    private DefaultTableModel tableModelBill;
    private DataController dataController;

    private int selectedCusIndex;
    private int selectedMovieIndex;

    /**
     * Creates new form HomeFrm
     */
    public HomeFrm() {
        initComponents();
        setLocationRelativeTo(null);
        addButtonGroup();
        addActionListener();
        movies = new ArrayList<>();
        customers = new ArrayList<>();
        bills = new ArrayList<>();
        tableModelMovie = (DefaultTableModel) tblMovie.getModel();
        tableModelCustomer = (DefaultTableModel) tblCustomer.getModel();
        tableModelBill = (DefaultTableModel) tblBill.getModel();
        dataController = new DataControllerImp();
        selectedCusIndex = -1;
        selectedMovieIndex = -1;
        loadData();
        showData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupSortMovie = new javax.swing.ButtonGroup();
        buttonGroupSearchMovie = new javax.swing.ButtonGroup();
        buttonGroupSortCustomer = new javax.swing.ButtonGroup();
        buttonGroupSearchCustomer = new javax.swing.ButtonGroup();
        buttonGroupSearchBill = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        rbSortMovieIdASC = new javax.swing.JRadioButton();
        rbSortMovieIdDESC = new javax.swing.JRadioButton();
        rbSortMovieNameDESC = new javax.swing.JRadioButton();
        rbSortMovieNameASC = new javax.swing.JRadioButton();
        jPanel4 = new javax.swing.JPanel();
        rbSearchMovieById = new javax.swing.JRadioButton();
        rbSearchMovieByName = new javax.swing.JRadioButton();
        rbSearchMovieByRoomType = new javax.swing.JRadioButton();
        txtSearchMovieByName = new javax.swing.JTextField();
        btnSearchMovie = new javax.swing.JButton();
        txtSearchMovieById = new javax.swing.JTextField();
        comboSearchRoomType = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblMovie = new javax.swing.JTable();
        btnRefreshMovie = new javax.swing.JButton();
        btnAddMovie = new javax.swing.JButton();
        btnEditMovie = new javax.swing.JButton();
        btnRemoveMovie = new javax.swing.JButton();
        btnBookTicket = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        rbSortCusIdASC = new javax.swing.JRadioButton();
        rbSortCusIdDESC = new javax.swing.JRadioButton();
        rbSortCusNameDESC = new javax.swing.JRadioButton();
        rbSortCusNameASC = new javax.swing.JRadioButton();
        jPanel6 = new javax.swing.JPanel();
        rbSearchCusById = new javax.swing.JRadioButton();
        rbSearchCusByName = new javax.swing.JRadioButton();
        rbSearchCusByCusType = new javax.swing.JRadioButton();
        txtSearchCusByName = new javax.swing.JTextField();
        btnSearchCus = new javax.swing.JButton();
        txtSearchCusById = new javax.swing.JTextField();
        comboSearchCusType = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblCustomer = new javax.swing.JTable();
        btnRefreshCustomer = new javax.swing.JButton();
        btnEditCustomer = new javax.swing.JButton();
        btnRemoveCustomer = new javax.swing.JButton();
        btnAddCustomer = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        rbSearchMovieInBillID = new javax.swing.JRadioButton();
        rbSearchCusInBillID = new javax.swing.JRadioButton();
        txtSearchCusInBillID = new javax.swing.JTextField();
        btnSearchBill = new javax.swing.JButton();
        txtSearchMovieInBillID = new javax.swing.JTextField();
        rbSearchBillByTime = new javax.swing.JRadioButton();
        txtSearchBillTimeTo = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtSearchBillTimeFrom = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblBill = new javax.swing.JTable();
        btnShowDetailBill = new javax.swing.JButton();
        btnRefreshBill = new javax.swing.JButton();
        btnRemoveBill = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("QUẢN LÍ BÁN VÉ PHIM");
        setResizable(false);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Sắp xếp danh sách phim", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N

        rbSortMovieIdASC.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        rbSortMovieIdASC.setText("Mã phim tăng dần");

        rbSortMovieIdDESC.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        rbSortMovieIdDESC.setText("Mã phim giảm dần");

        rbSortMovieNameDESC.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        rbSortMovieNameDESC.setText("Tên phim z-a");

        rbSortMovieNameASC.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        rbSortMovieNameASC.setText("Tên phim a-z");
        rbSortMovieNameASC.setToolTipText("");
        rbSortMovieNameASC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbSortMovieNameASCActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rbSortMovieIdASC)
                    .addComponent(rbSortMovieIdDESC))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rbSortMovieNameASC)
                    .addComponent(rbSortMovieNameDESC))
                .addGap(50, 50, 50))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(rbSortMovieNameASC)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rbSortMovieNameDESC)
                            .addComponent(rbSortMovieIdDESC)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(rbSortMovieIdASC)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tìm kiếm phim", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N

        rbSearchMovieById.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        rbSearchMovieById.setText("Theo mã phim");
        rbSearchMovieById.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbSearchMovieByIdActionPerformed(evt);
            }
        });

        rbSearchMovieByName.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        rbSearchMovieByName.setText("Theo tên phim gần đúng");
        rbSearchMovieByName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbSearchMovieByNameActionPerformed(evt);
            }
        });

        rbSearchMovieByRoomType.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        rbSearchMovieByRoomType.setText("Theo loại phòng chiếu");
        rbSearchMovieByRoomType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbSearchMovieByRoomTypeActionPerformed(evt);
            }
        });

        txtSearchMovieByName.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        btnSearchMovie.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnSearchMovie.setText("Tìm");

        txtSearchMovieById.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        comboSearchRoomType.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        comboSearchRoomType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2D", "3D", "4D" }));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(rbSearchMovieById)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnSearchMovie, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rbSearchMovieByName)
                            .addComponent(rbSearchMovieByRoomType))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtSearchMovieByName)
                            .addComponent(txtSearchMovieById)
                            .addComponent(comboSearchRoomType, 0, 215, Short.MAX_VALUE))
                        .addGap(0, 81, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbSearchMovieByName)
                    .addComponent(txtSearchMovieByName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbSearchMovieById)
                    .addComponent(btnSearchMovie)
                    .addComponent(txtSearchMovieById, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbSearchMovieByRoomType)
                    .addComponent(comboSearchRoomType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        tblMovie.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        tblMovie.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã phim", "Tên phim", "Loại phòng chiếu", "Số lượng ghế", "Số lượng ghế trống"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblMovie);

        btnRefreshMovie.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnRefreshMovie.setText("Làm mới");
        btnRefreshMovie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshMovieActionPerformed(evt);
            }
        });

        btnAddMovie.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnAddMovie.setText("Thêm phim");
        btnAddMovie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddMovieActionPerformed(evt);
            }
        });

        btnEditMovie.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnEditMovie.setText("Sửa phim");
        btnEditMovie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditMovieActionPerformed(evt);
            }
        });

        btnRemoveMovie.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnRemoveMovie.setText("Xóa phim");
        btnRemoveMovie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveMovieActionPerformed(evt);
            }
        });

        btnBookTicket.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnBookTicket.setText("Đặt vé");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(127, 127, 127)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnEditMovie, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnRefreshMovie, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(47, 47, 47)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnAddMovie, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnRemoveMovie, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(47, 47, 47)
                        .addComponent(btnBookTicket, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnRefreshMovie)
                            .addComponent(btnAddMovie))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnEditMovie)
                            .addComponent(btnRemoveMovie)))
                    .addComponent(btnBookTicket, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(33, 33, 33))
        );

        jTabbedPane1.addTab("QUẢN LÝ PHIM ĐANG CHIẾU", jPanel1);

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Sắp xếp danh sách khách hàng", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N

        rbSortCusIdASC.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        rbSortCusIdASC.setText("Mã KH tăng dần");

        rbSortCusIdDESC.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        rbSortCusIdDESC.setText("Mã KH giảm dần");

        rbSortCusNameDESC.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        rbSortCusNameDESC.setText("Tên KH z-a");

        rbSortCusNameASC.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        rbSortCusNameASC.setText("Tên KH a-z");
        rbSortCusNameASC.setToolTipText("");
        rbSortCusNameASC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbSortCusNameASCActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rbSortCusIdASC)
                    .addComponent(rbSortCusIdDESC))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 69, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rbSortCusNameASC)
                    .addComponent(rbSortCusNameDESC))
                .addGap(47, 47, 47))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(rbSortCusNameASC)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rbSortCusNameDESC)
                            .addComponent(rbSortCusIdDESC)))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(rbSortCusIdASC)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tìm kiếm khách hàng", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N

        rbSearchCusById.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        rbSearchCusById.setText("Theo mã KH");
        rbSearchCusById.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbSearchCusByIdActionPerformed(evt);
            }
        });

        rbSearchCusByName.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        rbSearchCusByName.setText("Theo tên KH gần đúng");
        rbSearchCusByName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbSearchCusByNameActionPerformed(evt);
            }
        });

        rbSearchCusByCusType.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        rbSearchCusByCusType.setText("Theo đối tượng KH");
        rbSearchCusByCusType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbSearchCusByCusTypeActionPerformed(evt);
            }
        });

        txtSearchCusByName.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        btnSearchCus.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnSearchCus.setText("Tìm");

        txtSearchCusById.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        comboSearchCusType.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        comboSearchCusType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Khách hàng thường", "Khách hàng học sinh/sinh viên" }));

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rbSearchCusById)
                    .addComponent(rbSearchCusByName)
                    .addComponent(rbSearchCusByCusType))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtSearchCusById)
                            .addComponent(comboSearchCusType, 0, 215, Short.MAX_VALUE))
                        .addGap(17, 17, 17)
                        .addComponent(btnSearchCus, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(txtSearchCusByName, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbSearchCusByName)
                    .addComponent(txtSearchCusByName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbSearchCusById)
                    .addComponent(btnSearchCus)
                    .addComponent(txtSearchCusById, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbSearchCusByCusType)
                    .addComponent(comboSearchCusType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        tblCustomer.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        tblCustomer.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã khách hàng", "Họ và Tên", "Đối tượng", "Ngày sinh", "Số điện thoại", "Email"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblCustomer);

        btnRefreshCustomer.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnRefreshCustomer.setText("Làm mới");
        btnRefreshCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshCustomerActionPerformed(evt);
            }
        });

        btnEditCustomer.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnEditCustomer.setText("Sửa khách hàng");
        btnEditCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditCustomerActionPerformed(evt);
            }
        });

        btnRemoveCustomer.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnRemoveCustomer.setText("Xóa khách hàng");
        btnRemoveCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveCustomerActionPerformed(evt);
            }
        });

        btnAddCustomer.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnAddCustomer.setText("Thêm khách hàng");
        btnAddCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddCustomerActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setText("OC : Khách hàng thường");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setText("SC : Khách hàng học sinh/sinh viên");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(127, 127, 127)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnEditCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnRefreshCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(47, 47, 47)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnAddCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnRemoveCustomer, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(29, 29, 29)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnRefreshCustomer)
                        .addComponent(btnAddCustomer))
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnEditCustomer)
                        .addComponent(btnRemoveCustomer))
                    .addComponent(jLabel2))
                .addContainerGap(33, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("QUẢN LÝ KHÁCH HÀNG", jPanel2);

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tìm kiếm hóa đơn", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N

        rbSearchMovieInBillID.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbSearchMovieInBillID.setText("Theo mã phim");
        rbSearchMovieInBillID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbSearchMovieInBillIDActionPerformed(evt);
            }
        });

        rbSearchCusInBillID.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbSearchCusInBillID.setText("Theo mã khách hàng");
        rbSearchCusInBillID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbSearchCusInBillIDActionPerformed(evt);
            }
        });

        txtSearchCusInBillID.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        btnSearchBill.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnSearchBill.setText("Tìm");

        txtSearchMovieInBillID.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        rbSearchBillByTime.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbSearchBillByTime.setText("Tìm từ ngày:");
        rbSearchBillByTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbSearchBillByTimeActionPerformed(evt);
            }
        });

        txtSearchBillTimeTo.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("đến ngày");

        txtSearchBillTimeFrom.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jLabel4.setText("Định dạng: dd/MM/yyyy. Ví dụ: 29/10/2000");

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(rbSearchCusInBillID)
                        .addGap(24, 24, 24)
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtSearchCusInBillID, javax.swing.GroupLayout.DEFAULT_SIZE, 215, Short.MAX_VALUE)
                            .addComponent(txtSearchMovieInBillID)))
                    .addComponent(rbSearchMovieInBillID))
                .addGap(51, 51, 51)
                .addComponent(rbSearchBillByTime)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(txtSearchBillTimeFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtSearchBillTimeTo, javax.swing.GroupLayout.DEFAULT_SIZE, 86, Short.MAX_VALUE))
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(35, 35, 35))
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGap(362, 362, 362)
                .addComponent(btnSearchBill, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbSearchCusInBillID)
                    .addComponent(txtSearchCusInBillID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(8, 8, 8)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbSearchMovieInBillID)
                    .addComponent(txtSearchMovieInBillID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rbSearchBillByTime)
                    .addComponent(txtSearchBillTimeTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(txtSearchBillTimeFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addComponent(btnSearchBill))
        );

        tblBill.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tblBill.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã khách hàng", "Mã Phim", "Loại phòng chiếu", "Tổng tiền", "Thời gian đặt vé"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tblBill);

        btnShowDetailBill.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnShowDetailBill.setText("Xem chi tiết");

        btnRefreshBill.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnRefreshBill.setText("Làm mới");

        btnRemoveBill.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnRemoveBill.setText("Xóa hóa đơn");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 874, Short.MAX_VALUE)
                    .addComponent(jPanel9, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(98, 98, 98)
                .addComponent(btnRefreshBill, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(98, 98, 98)
                .addComponent(btnShowDetailBill, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(98, 98, 98)
                .addComponent(btnRemoveBill, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 319, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnShowDetailBill, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRefreshBill, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRemoveBill, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24))
        );

        jTabbedPane1.addTab("QUẢN LÝ HÓA ĐƠN", jPanel7);

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 271, Short.MAX_VALUE)
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(613, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(440, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("tab4", jPanel8);

        jMenu1.setText("File");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.ALT_DOWN_MASK));
        jMenuItem1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/turn-off-24px.png"))); // NOI18N
        jMenuItem1.setText("Thoát");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        getAccessibleContext().setAccessibleName("QUẢN LÍ ĐẶT VÉ");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnRefreshMovieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshMovieActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnRefreshMovieActionPerformed

    private void btnAddMovieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddMovieActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnAddMovieActionPerformed

    private void btnEditMovieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditMovieActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnEditMovieActionPerformed

    private void btnRemoveMovieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveMovieActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnRemoveMovieActionPerformed

    private void rbSortMovieNameASCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbSortMovieNameASCActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbSortMovieNameASCActionPerformed

    private void rbSearchMovieByRoomTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbSearchMovieByRoomTypeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbSearchMovieByRoomTypeActionPerformed

    private void rbSearchMovieByNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbSearchMovieByNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbSearchMovieByNameActionPerformed

    private void rbSearchMovieByIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbSearchMovieByIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbSearchMovieByIdActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        dispose();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void rbSortCusNameASCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbSortCusNameASCActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbSortCusNameASCActionPerformed

    private void rbSearchCusByIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbSearchCusByIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbSearchCusByIdActionPerformed

    private void rbSearchCusByNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbSearchCusByNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbSearchCusByNameActionPerformed

    private void rbSearchCusByCusTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbSearchCusByCusTypeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbSearchCusByCusTypeActionPerformed

    private void btnRefreshCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshCustomerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnRefreshCustomerActionPerformed

    private void btnEditCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditCustomerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnEditCustomerActionPerformed

    private void btnRemoveCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveCustomerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnRemoveCustomerActionPerformed

    private void btnAddCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddCustomerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnAddCustomerActionPerformed

    private void rbSearchCusInBillIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbSearchCusInBillIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbSearchCusInBillIDActionPerformed

    private void rbSearchMovieInBillIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbSearchMovieInBillIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbSearchMovieInBillIDActionPerformed

    private void rbSearchBillByTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbSearchBillByTimeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbSearchBillByTimeActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HomeFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HomeFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HomeFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HomeFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HomeFrm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddCustomer;
    private javax.swing.JButton btnAddMovie;
    private javax.swing.JButton btnBookTicket;
    private javax.swing.JButton btnEditCustomer;
    private javax.swing.JButton btnEditMovie;
    private javax.swing.JButton btnRefreshBill;
    private javax.swing.JButton btnRefreshCustomer;
    private javax.swing.JButton btnRefreshMovie;
    private javax.swing.JButton btnRemoveBill;
    private javax.swing.JButton btnRemoveCustomer;
    private javax.swing.JButton btnRemoveMovie;
    private javax.swing.JButton btnSearchBill;
    private javax.swing.JButton btnSearchCus;
    private javax.swing.JButton btnSearchMovie;
    private javax.swing.JButton btnShowDetailBill;
    private javax.swing.ButtonGroup buttonGroupSearchBill;
    private javax.swing.ButtonGroup buttonGroupSearchCustomer;
    private javax.swing.ButtonGroup buttonGroupSearchMovie;
    private javax.swing.ButtonGroup buttonGroupSortCustomer;
    private javax.swing.ButtonGroup buttonGroupSortMovie;
    private javax.swing.JComboBox<String> comboSearchCusType;
    private javax.swing.JComboBox<String> comboSearchRoomType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JRadioButton rbSearchBillByTime;
    private javax.swing.JRadioButton rbSearchCusByCusType;
    private javax.swing.JRadioButton rbSearchCusById;
    private javax.swing.JRadioButton rbSearchCusByName;
    private javax.swing.JRadioButton rbSearchCusInBillID;
    private javax.swing.JRadioButton rbSearchMovieById;
    private javax.swing.JRadioButton rbSearchMovieByName;
    private javax.swing.JRadioButton rbSearchMovieByRoomType;
    private javax.swing.JRadioButton rbSearchMovieInBillID;
    private javax.swing.JRadioButton rbSortCusIdASC;
    private javax.swing.JRadioButton rbSortCusIdDESC;
    private javax.swing.JRadioButton rbSortCusNameASC;
    private javax.swing.JRadioButton rbSortCusNameDESC;
    private javax.swing.JRadioButton rbSortMovieIdASC;
    private javax.swing.JRadioButton rbSortMovieIdDESC;
    private javax.swing.JRadioButton rbSortMovieNameASC;
    private javax.swing.JRadioButton rbSortMovieNameDESC;
    private javax.swing.JTable tblBill;
    private javax.swing.JTable tblCustomer;
    private javax.swing.JTable tblMovie;
    private javax.swing.JTextField txtSearchBillTimeFrom;
    private javax.swing.JTextField txtSearchBillTimeTo;
    private javax.swing.JTextField txtSearchCusById;
    private javax.swing.JTextField txtSearchCusByName;
    private javax.swing.JTextField txtSearchCusInBillID;
    private javax.swing.JTextField txtSearchMovieById;
    private javax.swing.JTextField txtSearchMovieByName;
    private javax.swing.JTextField txtSearchMovieInBillID;
    // End of variables declaration//GEN-END:variables

    private void addButtonGroup() {
        buttonGroupSearchMovie.add(rbSearchMovieByName);
        buttonGroupSearchMovie.add(rbSearchMovieById);
        buttonGroupSearchMovie.add(rbSearchMovieByRoomType);

        buttonGroupSortMovie.add(rbSortMovieIdASC);
        buttonGroupSortMovie.add(rbSortMovieIdDESC);
        buttonGroupSortMovie.add(rbSortMovieNameASC);
        buttonGroupSortMovie.add(rbSortMovieNameDESC);

        buttonGroupSearchCustomer.add(rbSearchCusById);
        buttonGroupSearchCustomer.add(rbSearchCusByName);
        buttonGroupSearchCustomer.add(rbSearchCusByCusType);

        buttonGroupSortCustomer.add(rbSortCusIdASC);
        buttonGroupSortCustomer.add(rbSortCusIdDESC);
        buttonGroupSortCustomer.add(rbSortCusNameASC);
        buttonGroupSortCustomer.add(rbSortCusNameDESC);

//        buttonGroupSearchBill.add(rbSearchBillByRType);
        buttonGroupSearchBill.add(rbSearchBillByTime);
        buttonGroupSearchBill.add(rbSearchMovieInBillID);
        buttonGroupSearchBill.add(rbSearchCusInBillID);
    }

    private void addActionListener() {
        btnAddMovie.addActionListener(this);
        btnEditMovie.addActionListener(this);
        btnRemoveMovie.addActionListener(this);
        btnRefreshMovie.addActionListener(this);
        btnBookTicket.addActionListener(this);
        btnSearchMovie.addActionListener(this);

        btnAddCustomer.addActionListener(this);
        btnEditCustomer.addActionListener(this);
        btnRefreshCustomer.addActionListener(this);
        btnRemoveCustomer.addActionListener(this);
        btnSearchCus.addActionListener(this);

        btnRemoveBill.addActionListener(this);
        btnShowDetailBill.addActionListener(this);
        btnRefreshBill.addActionListener(this);
        btnSearchBill.addActionListener(this);
        btnShowDetailBill.addActionListener(this);

        rbSearchMovieById.addActionListener(this);
        rbSearchMovieByName.addActionListener(this);
        rbSearchMovieByRoomType.addActionListener(this);
        rbSortMovieIdASC.addActionListener(this);
        rbSortMovieIdDESC.addActionListener(this);
        rbSortMovieNameASC.addActionListener(this);
        rbSortMovieNameDESC.addActionListener(this);

        rbSearchCusById.addActionListener(this);
        rbSearchCusByName.addActionListener(this);
        rbSearchCusByCusType.addActionListener(this);
        rbSortCusIdASC.addActionListener(this);
        rbSortCusIdDESC.addActionListener(this);
        rbSortCusNameASC.addActionListener(this);
        rbSortCusNameDESC.addActionListener(this);

        rbSearchCusInBillID.addActionListener(this);
        rbSearchMovieInBillID.addActionListener(this);
//        rbSearchBillByRType.addActionListener(this);
        rbSearchBillByTime.addActionListener(this);

    }

    public void addMovieCallback(Movie movie) {
        movies.add(movie);
        showMovie(movie);
        saveData(DataController.MOVIE);
    }

    public void addCustomerCallback(Customer customer) {
        customers.add(customer);
        showCustomer(customer);
        saveData(DataController.CUSTOMER);
    }

    public void addBookingCallback(Bill bill) {
        bills.add(bill);
        showBill(bill);
        saveData(DataController.BILL);
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        //Thực hiện các hành động
        var obj = e.getSource();
        if (obj.equals(btnAddMovie)) {
            AddMovieDialog addMovieDialog
                    = new AddMovieDialog(this, rootPaneCheckingEnabled);
            addMovieDialog.setVisible(true);
        } else if (obj.equals(btnRemoveMovie)) {
            removeMovie();
        } else if (obj.equals(btnEditMovie)) {
            editMovie();
        } else if (obj.equals(rbSortMovieIdASC)
                || obj.equals(rbSortMovieIdDESC)
                || obj.equals(rbSortMovieNameASC)
                || obj.equals(rbSortMovieNameDESC)) {
            sortMovies(obj);
        } else if (obj.equals(btnSearchMovie)) {
            searchMovie();
        } else if (obj.equals(btnRefreshMovie)) {
            refreshMovies();
        } else if (obj.equals(btnAddCustomer)) {
//            editCustomerId();
            addNewCustomer();
        } else if (obj.equals(btnEditCustomer)) {
            editCustommer();
        } else if (obj.equals(btnRemoveCustomer)) {
            removeCustomer();
        } else if (obj.equals(btnRefreshCustomer)) {
            refreshCustomer();
        } else if (obj.equals(rbSortCusIdASC)
                || obj.equals(rbSortCusIdDESC)
                || obj.equals(rbSortCusNameASC)
                || obj.equals(rbSortCusNameDESC)) {
            sortCustomers(obj);
        } else if (obj.equals(btnSearchCus)) {
            searchCustomer();
        } else if (obj.equals(btnBookTicket)) {
            addNewBooking();
        } else if (obj.equals(btnRemoveBill)) {
            removeBill();
        } else if (obj.equals(btnSearchBill)) {
            searchBill();
        } else if (obj.equals(rbSearchBillByTime)
                || obj.equals(rbSearchCusInBillID)
                || obj.equals(rbSearchMovieInBillID)) {
            switchInputState();
        } else if (obj.equals(btnRefreshBill)) {
            refreshBills();
        } else if (obj.equals(rbSearchMovieById)
                || obj.equals(rbSearchMovieByName)
                || obj.equals(rbSearchMovieByRoomType)) {
            switchInputStateMovie();
        } else if (obj.equals(rbSearchCusByCusType)
                || obj.equals(rbSearchCusById)
                || obj.equals(rbSearchCusByName)) {
            switchInputStateCus();
        } else if (obj.equals(btnShowDetailBill)) {
            showDetailBill();
        }
    }

    private void showMovie(Movie movie) {
        Object[] row = new Object[]{
            movie.getId(), movie.getName(), movie.getType(),
            movie.getNumOfSeat(), movie.getAvailableSeat()
        };
        tableModelMovie.addRow(row);
    }

    private void loadData() {
        // đọc danh sách phim
        movies = dataController
                .<Movie>readDataFromFile(DataController.MOVIE_FILE);
        // đọc danh sách khách hàng
        customers = dataController
                .<Customer>readDataFromFile(DataController.CUS_FILE);
        bills = dataController.<Bill>readDataFromFile(DataController.BILL_FILE);
        editMovieId();
        editCustomerId();
    }

    private void showData() {
        showMovies();
        showCustomers();
        showBills();
    }

    private void showMovies() {
        tableModelMovie.setRowCount(0); // clear data
        for (Movie movie : movies) {
            showMovie(movie);
        }
    }

    private void showCustomers() {
        tableModelCustomer.setRowCount(0);
        for (Customer customer : customers) {
            showCustomer(customer);
        }
    }

    private void saveData(int choice) {
        switch (choice) {
            case DataController.MOVIE:
                dataController.<Movie>writeToFile(movies,
                        DataController.MOVIE_FILE);
                break;
            case DataController.BILL:
                dataController.<Bill>writeToFile(bills,
                        DataController.BILL_FILE);
                break;
            case DataController.CUSTOMER:
                dataController.<Customer>writeToFile(customers,
                        DataController.CUS_FILE);
                break;
        }
    }

    private void editMovieId() {
        int maxId = Movie.getsId();
        if (movies.isEmpty()) { // nếu list trống -> id = 100000
            Movie.setsId(maxId);
        } else {
            for (Movie movie : movies) {
                if (movie.getId() > maxId) {
                    maxId = movie.getId();
                }
            }
            Movie.setsId(maxId + 1);
        }
    }

    private void editCustomerId() {
        int maxId = Customer.getsId();
//        var idSplit = customer.getId();
        if (customers.isEmpty()) { // nếu list trống -> id = 100000
            Customer.setsId(maxId);
        } else {
            for (Customer customer : customers) {
                var idSplitStr = customer.getId().substring(2);
                int idSplit = Integer.parseInt(idSplitStr);
                if (idSplit > maxId) {

                    maxId = idSplit;
                }
            }
            Customer.setsId(maxId + 1);
        }
    }

    private void removeMovie() {
        selectedMovieIndex = tblMovie.getSelectedRow();
        if (selectedMovieIndex > -1) {
            var msg = "Có chắc bạn muốn xóa bản ghi này?";
            var confirm = JOptionPane.showConfirmDialog(rootPane, msg);
            if (confirm == JOptionPane.OK_OPTION) {
                movies.remove(selectedMovieIndex);
                tableModelMovie.removeRow(selectedMovieIndex);
                dataController.<Movie>writeToFile(movies,
                        DataController.MOVIE_FILE);
            }
        } else {
            var msg = "Vui lòng chọn 1 bản ghi để xóa!";
            showDialogMessage(msg);
        }
    }

    private void showDialogMessage(String msg) {
        JOptionPane.showMessageDialog(rootPane, msg);
    }

    private void editMovie() {
        selectedMovieIndex = tblMovie.getSelectedRow();
        if (selectedMovieIndex > -1) {
            Movie movie = movies.get(selectedMovieIndex);
            EditMovieDialog editMovieDialog
                    = new EditMovieDialog(this, rootPaneCheckingEnabled, movie);
            editMovieDialog.setVisible(true);
        } else {
            var msg = "Vui lòng chọn 1 bản ghi để cập nhật!";
            showDialogMessage(msg);
        }
    }

    public void editMovieCallback(Movie movie) {

        tableModelMovie.removeRow(selectedMovieIndex);
        Object[] row = new Object[]{
            movie.getId(), movie.getName(), movie.getType(),
            movie.getNumOfSeat(), movie.getAvailableSeat()
        };
        tableModelMovie.insertRow(selectedMovieIndex, row);
        movies.set(selectedMovieIndex, movie);
        saveData(DataController.MOVIE);
        selectedMovieIndex = -1;
    }

    public void editCustomerCallback(Customer customer) {
        tableModelMovie.removeRow(selectedCusIndex);
        var format = "dd/MM/yyyy";
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(format);
        Object[] row = new Object[]{
            customer.getId(), customer.getFullName(),
            customer.getCustomerType(),
            simpleDateFormat.format(customer.getDob()),
            customer.getPhoneNumber(), customer.getEmail()
        };
        tableModelCustomer.insertRow(selectedCusIndex, row);
        customers.set(selectedCusIndex, customer);
        saveData(DataController.CUSTOMER);
        showCustomers();
        showMovies();
        selectedCusIndex = -1;
    }

    private void sortMovies(Object obj) {
        if (obj.equals(rbSortMovieIdASC)) {
            dataController.sortMovieByIdASC(movies);
        } else if (obj.equals(rbSortMovieIdDESC)) {
            dataController.sortMovieByIdDESC(movies);
        } else if (obj.equals(rbSortMovieNameASC)) {
            dataController.sortMovieByNameASC(movies);
        } else if (obj.equals(rbSortMovieNameDESC)) {
            dataController.sortMovieByNameDESC(movies);
        }
        showMovies();
    }

    private void searchMovie() {
        reloadMovie();
        if (rbSearchMovieByName.isSelected()) {
            var key = txtSearchMovieByName.getText();
            if (key.isEmpty()) {
                var msg = "Vui lòng nhập tên phim cần tìm!";
                showDialogMessage(msg);
            } else {
                var result = dataController.searchMovieByName(movies, key);
                movies.clear();
                movies.addAll(result);
                checkAndShowSearchMovieResult();
            }
        } else if (rbSearchMovieById.isSelected()) {
            var keyString = txtSearchMovieById.getText();
            if (!keyString.isEmpty()) {
                var key = Integer.parseInt(keyString);
                var result = dataController.searchMovieById(movies, key);
                movies.clear();
                movies.addAll(result);
                checkAndShowSearchMovieResult();
            } else {
                var msg = "Vui lòng nhập ID phim cần tìm!";
                showDialogMessage(msg);
            }
        } else if (rbSearchMovieByRoomType.isSelected()) {
            var key = comboSearchRoomType.getSelectedItem().toString();
            var result = dataController.searchMovieByRoomType(movies, key);
            movies.clear();
            movies.addAll(result);
            checkAndShowSearchMovieResult();

        } else {
            var msg = "Vui lòng chọn phương thức tìm kiếm trước!";
            showDialogMessage(msg);
        }
    }

    private void checkAndShowSearchMovieResult() {
        if (movies.size() > 0) {
            showMovies();
            var msg = "Tìm thấy " + movies.size() + " kết quả!";
            showDialogMessage(msg);
        } else {
            movies.clear();
            showMovies();
            var msg = "Không tìm thấy kết quả nào!";
            showDialogMessage(msg);
        }
    }

    private void checkAndShowSearchCusResult() {
        if (customers.size() > 0) {
            showCustomers();
            var msg = "Tìm thấy " + customers.size() + " kết quả!";
            showDialogMessage(msg);
        } else {
            customers.clear();
            showCustomers();
            var msg = "Không tìm thấy kết quả nào!";
            showDialogMessage(msg);
        }
    }

    private void refreshMovies() {
        var text = "";
        txtSearchMovieById.setText(text);
        txtSearchMovieByName.setText(text);
        comboSearchRoomType.setSelectedIndex(0);
        buttonGroupSearchMovie.clearSelection();
        buttonGroupSortMovie.clearSelection();
        txtSearchMovieById.setEnabled(true);
        txtSearchMovieByName.setEnabled(true);
        comboSearchRoomType.setEnabled(true);
        reloadMovie();
        showMovies();
    }

    private void reloadMovie() {
        movies.clear();
        movies.addAll(dataController
                .readDataFromFile(DataController.MOVIE_FILE));
    }

    private void addNewCustomer() {
        AddCustomerDialog addCustomerDialog
                = new AddCustomerDialog(this, rootPaneCheckingEnabled);
        addCustomerDialog.setVisible(true);
    }

    private void showCustomer(Customer customer) {
        var format = "dd/MM/yyyy";
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(format);
        Object[] row = new Object[]{
            customer.getId(), customer.getFullName(),
            customer.getCustomerType(),
            simpleDateFormat.format(customer.getDob()),
            customer.getPhoneNumber(), customer.getEmail()
        };
        tableModelCustomer.addRow(row);
    }

    private void editCustommer() {
        selectedCusIndex = tblCustomer.getSelectedRow();
        if (selectedCusIndex > -1) {
            Customer customer = customers.get(selectedCusIndex);
            EditCustomerDialog editCustomerDialog
                    = new EditCustomerDialog(this, true, customer);
            editCustomerDialog.setVisible(true);
        } else {
            var msg = "Vui lòng chọn 1 bản ghi để cập nhật!";
            showDialogMessage(msg);
        }
    }

    private void removeCustomer() {
        int removeIndex = tblCustomer.getSelectedRow();
        if (removeIndex > -1) {
            var msg = "Bạn có chắc là muốn xóa khách hàng này không?";
            int reValue = JOptionPane.showConfirmDialog(rootPane, msg);
            if (reValue == JOptionPane.YES_OPTION) {
                tableModelCustomer.removeRow(removeIndex);
                customers.remove(removeIndex);
                dataController.<Customer>writeToFile(customers,
                        DataController.CUS_FILE);
            }
        } else {
            var msg = "Vui lòng chọn khách hàng để xóa!";
            showDialogMessage(msg);
        }
    }

    private void refreshCustomer() {
        buttonGroupSearchCustomer.clearSelection();
        buttonGroupSortCustomer.clearSelection();
        var emptyText = "";
        txtSearchCusById.setText(emptyText);
        txtSearchCusByName.setText(emptyText);
        comboSearchCusType.setSelectedIndex(0);
        tableModelCustomer.setRowCount(0);
        txtSearchCusById.setEnabled(true);
        txtSearchCusByName.setEnabled(true);
        comboSearchCusType.setEnabled(true);
        reloadCustomers();
        dataController.sortCusByIdASC(customers);
        showCustomers();
    }

    private void reloadCustomers() {
        customers.clear();
        customers.addAll(dataController
                .readDataFromFile(DataController.CUS_FILE));

    }

    private void sortCustomers(Object obj) {
        if (obj.equals(rbSortCusIdASC)) {
            dataController.sortCusByIdASC(customers);
        } else if (obj.equals(rbSortCusIdDESC)) {
            dataController.sortCusByIdDESC(customers);
        } else if (obj.equals(rbSortCusNameASC)) {
            dataController.sortCusByNameASC(customers);
        } else if (obj.equals(rbSortCusNameDESC)) {
            dataController.sortCusByNameDESC(customers);
        }
        showCustomers();
    }

    private void searchCustomer() {
        reloadCustomers();
        if (rbSearchCusByName.isSelected()) {
            var key = txtSearchCusByName.getText();
            if (key.isEmpty()) {
                var msg = "Vui lòng nhập tên khách hàng cần tìm!";
                showDialogMessage(msg);
            } else {
                var result = dataController.searchCusByName(customers, key);
                customers.clear();
                customers.addAll(result);
                checkAndShowSearchCusResult();
            }
        } else if (rbSearchCusById.isSelected()) {
            var key = txtSearchCusById.getText();
            if (!key.isEmpty()) {
//                var key = Integer.parseInt(keyString);
                var result = dataController.searchCusById(customers, key);
                customers.clear();
                customers.addAll(result);
                checkAndShowSearchCusResult();
            } else {
                var msg = "Vui lòng nhập ID khách hàng cần tìm!";
                showDialogMessage(msg);
            }
        } else if (rbSearchCusByCusType.isSelected()) {
            var index = comboSearchCusType.getSelectedIndex();
            List<Customer> result = checkCusType(index);

//            JOptionPane.showMessageDialog(rootPane, key);
//            var result = dataController.searchCusByCusType(customers, key);
            customers.clear();
            customers.addAll(result);
            checkAndShowSearchCusResult();
        } else {
            var msg = "Vui lòng chọn phương thức tìm kiếm trước!";
            showDialogMessage(msg);
        }
    }

    private List<Customer> checkCusType(int index) {
        if (index == 0) {
            return dataController.searchCusByCusType(customers, "OC");
        } else {
            return dataController.searchCusByCusType(customers, "SC");
        }
    }

    private void addNewBooking() {
        selectedMovieIndex = tblMovie.getSelectedRow();
        Movie m = null;
        if (selectedMovieIndex > -1) {
            m = movies.get(selectedMovieIndex);
            BookTicketDialog bookTicketDialog
                    = new BookTicketDialog(this, true, customers, m);
            bookTicketDialog.setVisible(true);
        } else {
            var msg = "Vui lòng chọn 1 phim để đặt vé!";
            showDialogMessage(msg);
        }

    }

    private void showBill(Bill bill) {
        var format = "dd/MM/yyyy HH:mm:ss";
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(format);
        Object[] row = new Object[]{
            bill.getCustomer().getId(), bill.getMovie().getId(),
            bill.getMovie().getType(), bill.getPriceticket(),
            simpleDateFormat.format(bill.getBookDate())
        };
        tableModelBill.addRow(row);
    }

    private void showBills() {
        tableModelBill.setRowCount(0); // clear data
        for (Bill bill : bills) {
            showBill(bill);
        }
    }

    private void removeBill() {
        var index = tblBill.getSelectedRow();
        if (index > -1) {
            var msg = "Bạn có chắc muốn xóa hóa đơn này?";
            int reVal = JOptionPane.showConfirmDialog(rootPane, msg);
            if (reVal == JOptionPane.YES_OPTION) {
                tableModelBill.removeRow(index);
                bills.remove(index);
                saveData(DataController.BILL);
            }
        } else {
            var msg = "Vui lòng chọn 1 hóa đơn để xóa!";
            showDialogMessage(msg);
        }
    }

    private void searchBill() {
        reloadBills();
        List<Bill> copyList = new ArrayList<>(bills);
        if (rbSearchBillByTime.isSelected()) {
            var fromStr = txtSearchBillTimeFrom.getText().trim();
            var toStr = txtSearchBillTimeTo.getText().trim();
            if (fromStr.isEmpty() || toStr.isEmpty()) {
                var msg = "Vui lòng đầy đủ ngày cần tìm!"
                        + "\nĐịnh dạng: dd/MM/yyyy.";
                showDialogMessage(msg);
            } else {
                var format = "dd/MM/yyyy";
                var dateFormat = new SimpleDateFormat(format);
                try {
                    Date fromDate = dateFormat.parse(fromStr);
                    Date toDate = dateFormat.parse(toStr);
                    bills.clear();
                    bills.addAll(dataController
                            .searchBillByTime(copyList, fromDate, toDate));
                    showBills();
                    var msg = "Tìm thấy " + bills.size() + " kết quả.";
                    showDialogMessage(msg);
                } catch (ParseException ex) {
                    var msg = "Vui lòng nhập đúng định dạng dd/MM/yyyy.\n"
                            + "Ví dụ: 25/02/2000";
                    showDialogMessage(msg);
                }
            }
        } else if (rbSearchCusInBillID.isSelected()) {
            var cusId = txtSearchCusInBillID.getText();
            if (cusId.isEmpty()) {
                var msg = "Vui lòng nhập mã khách hàng để tìm!";
                showDialogMessage(msg);
            } else {
                bills.clear();
                bills.addAll(dataController.searchBillByCusId(copyList, cusId));
//                checkAndShowBills();
                showBills();
                var msg = "Tìm thấy " + bills.size() + " kết quả.";
                showDialogMessage(msg);
            }
        } else if (rbSearchMovieInBillID.isSelected()) {
            var movieId = txtSearchMovieInBillID.getText();
            if (movieId.isEmpty()) {
                var msg = "Vui lòng nhập mã phim để tìm!";
                showDialogMessage(msg);
            } else {
                bills.clear();
                bills.addAll(dataController.searchBillByMovieId(copyList, movieId));
                showBills();
                var msg = "Tìm thấy " + bills.size() + " kết quả.";
                showDialogMessage(msg);
            }
        } else {
            var msg = "Vui lòng chọn phương thức tìm kiếm trước!";
            showDialogMessage(msg);
        }
    }

    private void reloadBills() {
        bills.clear();
        bills.addAll(dataController
                .<Bill>readDataFromFile(DataController.BILL_FILE));
    }

    private void switchInputState() {
        
        if (rbSearchBillByTime.isSelected()) {
            txtSearchBillTimeFrom.setEnabled(true);
            txtSearchBillTimeTo.setEnabled(true);
            txtSearchCusInBillID.setEnabled(false);
            txtSearchMovieInBillID.setEnabled(false);
        } else if (rbSearchCusInBillID.isSelected()) {
            txtSearchBillTimeFrom.setEnabled(false);
            txtSearchBillTimeTo.setEnabled(false);
            txtSearchCusInBillID.setEnabled(true);
            txtSearchMovieInBillID.setEnabled(false);
        } else if (rbSearchMovieInBillID.isSelected()) {
            txtSearchBillTimeFrom.setEnabled(false);
            txtSearchBillTimeTo.setEnabled(false);
            txtSearchCusInBillID.setEnabled(false);
            txtSearchMovieInBillID.setEnabled(true);
        }
    }

    private void refreshBills() {
        buttonGroupSearchBill.clearSelection();
        txtSearchBillTimeFrom.setText("");
        txtSearchBillTimeTo.setText("");
        txtSearchCusInBillID.setText("");
        txtSearchMovieInBillID.setText("");
        txtSearchBillTimeFrom.setEnabled(true);
        txtSearchBillTimeTo.setEnabled(true);
        txtSearchCusInBillID.setEnabled(true);
        txtSearchMovieInBillID.setEnabled(true);
        reloadBills();
        showBills();
    }

    private void switchInputStateMovie() {
        if (rbSearchMovieById.isSelected()) {
            txtSearchMovieById.setEnabled(true);
            txtSearchMovieByName.setEnabled(false);
            comboSearchRoomType.setEnabled(false);
        } else if (rbSearchMovieByName.isSelected()) {
            txtSearchMovieById.setEnabled(false);
            txtSearchMovieByName.setEnabled(true);
            comboSearchRoomType.setEnabled(false);
        } else if (rbSearchMovieByRoomType.isSelected()) {
            txtSearchMovieById.setEnabled(false);
            txtSearchMovieByName.setEnabled(false);
            comboSearchRoomType.setEnabled(true);
        }
    }

    private void switchInputStateCus() {
        if (rbSearchCusById.isSelected()) {
            txtSearchCusById.setEnabled(true);
            txtSearchCusByName.setEnabled(false);
            comboSearchCusType.setEnabled(false);
        } else if (rbSearchCusByName.isSelected()) {
            txtSearchCusById.setEnabled(false);
            txtSearchCusByName.setEnabled(true);
            comboSearchCusType.setEnabled(false);
        } else if (rbSearchCusByCusType.isSelected()) {
            txtSearchCusById.setEnabled(false);
            txtSearchCusByName.setEnabled(false);
            comboSearchCusType.setEnabled(true);
        }
    }

    private void showDetailBill() {
        var selectedBillIndex = tblBill.getSelectedRow();
        Bill b;
        if (selectedBillIndex > -1) {
            b = bills.get(selectedBillIndex);
            ShowDetailedBillInBill showDetailedBillInBill = 
                    new ShowDetailedBillInBill(this, 
                            rootPaneCheckingEnabled, b);
            showDetailedBillInBill.setVisible(true);
        } else {
            var msg = "Vui lòng chọn 1 hóa đơn để xem chi tiết!";
            showDialogMessage(msg);
        }
    }

}
